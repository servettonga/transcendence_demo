services:
  postgres:
    image: postgres:latest
    container_name: ft_transcendence_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - ft_transcendence_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: backend
      target: development
    volumes:
      - ./backend:/app:rw
      - /app/__pycache__/
      - /app/**/__pycache__/
      - /app/**/*.pyc
      - /app/**/*.pyo
      - /app/**/*.pyd
      - /app/.pytest_cache/
      - /app/.coverage
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${BACKEND_PORT}:8000"
    networks:
      - ft_transcendence_network

  nginx:
    build: ./docker/nginx
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - backend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./backend/media:/app/media
      - ./backend/staticfiles:/app/staticfiles
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - ft_transcendence_network

  redis:
    image: redis:alpine
    container_name: ft_transcendence_redis
    command: redis-server --maxmemory 100mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    networks:
      - ft_transcendence_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - ft_transcendence_network
    restart: unless-stopped

  grafana:
    build:
      context: ./docker/grafana
      dockerfile: Dockerfile
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - ft_transcendence_network
    depends_on:
      - prometheus
    restart: unless-stopped

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    ports:
      - "${POSTGRES_EXPORTER_PORT:-9187}:9187"
    networks:
      - ft_transcendence_network
    depends_on:
      postgres:
        condition: service_healthy

  redis_exporter:
    image: oliver006/redis_exporter:latest
    command: --redis.addr=redis://redis:6379
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    networks:
      - ft_transcendence_network
    depends_on:
      redis:
        condition: service_healthy

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command: -nginx.scrape-uri=http://nginx:80/nginx_status
    ports:
      - "${NGINX_EXPORTER_PORT:-9113}:9113"
    networks:
      - ft_transcendence_network
    environment:
      - SCRAPE_URI=http://nginx:80/nginx_status
    depends_on:
      - nginx

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    volumes:
      - ./docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
    ulimits:
      memlock:
        soft: 1024
        hard: 2048
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - ft_transcendence_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTICSEARCH_PASSWORD:-changeme} http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    volumes:
      - ./docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - logstash_data:/usr/share/logstash/data
    ports:
      - "${LOGSTASH_PORT:-5044}:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - LOGSTASH_USER=logstash_writer
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD:-changeme}
    networks:
      - ft_transcendence_network
    depends_on:
      elasticsearch:
        condition: service_healthy
      es_init:
        condition: service_completed_successfully
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    volumes:
      - ./docker/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kibana_data:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD:-changeme}
      - xpack.security.enabled=true
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - ft_transcendence_network
    depends_on:
      elasticsearch:
        condition: service_healthy
      es_init:
        condition: service_completed_successfully
    restart: unless-stopped

  filebeat:
    image: docker.elastic.co/beats/filebeat:8.12.0
    user: root
    volumes:
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/general-logs:ro
      - ./backend/logs:/backend-logs
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - KIBANA_HOST=http://kibana:5601
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
    networks:
      - ft_transcendence_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    command: filebeat -e --strict.perms=false

  es_init:
    build:
      context: ./docker/elasticsearch
      dockerfile: Dockerfile.init
    environment:
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD:-changeme}
      - LOGSTASH_SYSTEM_PASSWORD=${LOGSTASH_SYSTEM_PASSWORD:-changeme}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD:-changeme}
    networks:
      - ft_transcendence_network
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: on-failure

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./docker/alertmanager:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    networks:
      - ft_transcendence_network
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  elasticsearch_data:
  logstash_data:
  kibana_data:

networks:
  ft_transcendence_network:
    driver: bridge
